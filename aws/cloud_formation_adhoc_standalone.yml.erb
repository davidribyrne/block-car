<%
require 'cdo/aws/cloudfront'
%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: Standalone Code.org application on a single EC2 instance with two subdomains.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: VPC}
      CidrBlock: 10.0.0.0/26
      AvailabilityZone: '<%=availability_zone%>'
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  Internet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: {Ref: VPC}
      InternetGatewayId: {Ref: InternetGateway}
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: {Ref: VPC}
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Internet
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: InternetGateway}
  SubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      SubnetId: {Ref: SubnetA}
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP[S] + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%=ssh_ip%>
      VpcId: {Ref: VPC}
  WebServer:
    Type: AWS::EC2::Instance
    DependsOn: Internet
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Metadata:
      Certificate:
        Key: {'Fn::GetAtt': [Certificate,Outputs.Key]}
        Name: {'Fn::GetAtt': [Certificate,Outputs.ServerCertificateName]}
    Properties:
      ImageId: <%=image_id%>
      SecurityGroupIds: [Ref: WebServerSecurityGroup]
      SubnetId: {Ref: SubnetA}
      InstanceType: <%=instance_type%>
      KeyName: <%=ssh_key_name%>
      Tags: [{Key: name, Value: <%=stack_name%>}]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64: <%=file.call('bootstrap.sh.erb')%>
  WebServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: {Ref: WebServer}
      Domain: vpc
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: '/'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['s3:GetObject']
                Resource: 'arn:aws:s3:::cdo-dist/*'
              - Effect: Allow
                Action: ['iam:GetServerCertificate']
                Resource: '*'
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: [Ref: RootRole]
  OriginDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "origin-<%=subdomain%>"
          Type: A
          TTL: 60
          ResourceRecords: [Ref: WebServerEIP]
  Certificate:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Domains: "origin-<%=subdomain%>,pegasus-<%=subdomain%>,dashboard-<%=subdomain%>"
      TemplateURL: https://s3.amazonaws.com/wjordan/template.json
      TimeoutInMinutes: 10
<% %w(Dashboard Pegasus).each do |app| %>
  <%=app%>CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%=AWS::CloudFront.config_cloudformation(app.downcase.to_sym, "origin-#{subdomain}", ["#{app.downcase}-#{subdomain}"], true, true)%>
  <%=app%>DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "<%=app.downcase%>-<%=subdomain%>"
#          Type: A
#          TTL: 60
#          ResourceRecords: [Ref: WebServerEIP]
          AliasTarget:
            DNSName: {'Fn::GetAtt': [<%=app%>CDN, DomainName]}
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
<% end %>
Outputs:
<% %w(Dashboard Pegasus).each do |app| %>
  <%=app%>URL:
    Value: "https://<%=app.downcase%>-<%=subdomain%>"
    Description: <%=app%> URL
<% end%>
