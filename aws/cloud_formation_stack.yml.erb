<%
require 'cdo/aws/cloudfront'
require 'aws-sdk'
%>
---
AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template for Code.org application
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: {Ref: VPC}
      CidrBlock: 10.0.0.0/26
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  Internet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: {Ref: VPC}
      InternetGatewayId: {Ref: InternetGateway}
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: {Ref: VPC}
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Internet
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: InternetGateway}
  SubnetRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: PublicRouteTable}
      SubnetId: {Ref: SubnetA}
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn: Internet
    Metadata:
      Comment1: Configure the Load Balancer with a simple health check and cookie-based stickiness
      Comment2: Use install path for healthcheck to avoid redirects - ELB healthcheck does not handle 302 return codes
    Properties:
      CrossZone: true
      SecurityGroups: [Ref: ELBSecurityGroup]
      Subnets: [Ref: SubnetA]
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames: [CookieBasedPolicy]
        - LoadBalancerPort: 443
          InstancePort: 80
          Protocol: HTTPS
          SSLCertificateId: <%=ssl_cert%>
          PolicyNames: [CookieBasedPolicy]
      HealthCheck:
        Target: HTTP:80/health_check.php
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 60
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP[S] access from the public Internet, HTTP downstream.
      VpcId: {Ref: VPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: {Ref: ELBSecurityGroup}
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: <%=ssh_ip%>
      VpcId: {Ref: VPC}
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: Internet
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 1
        PauseTime: PT60M
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier: [Ref: SubnetA]
      LaunchConfigurationName: {Ref: LaunchConfig}
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 4000
      LoadBalancerNames: [Ref: ElasticLoadBalancer]
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: <%=image_id%>
      InstanceType: <%=instance_type%>
      IamInstanceProfile: {Ref: RootInstanceProfile}
      SecurityGroups: [Ref: WebServerSecurityGroup]
      KeyName: <%=ssh_key_name%>
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 64
            VolumeType: gp2
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            -
              - "#!/bin/bash -x\n"
              - "apt-get update\n"
              - "apt-get -y install python-pip\n"
              - "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.4-8.tar.gz\n"
              - "sudo -u ubuntu bash -c 'curl https://s3.amazonaws.com/cdo-dist/cdo-bootstrap.sh | sudo bash -s -- <%=local_mode ? '-z' : ''%> -b <%=branch%> -r \"recipe[cdo-apps]\"'"
              - "\n"
              - "/usr/local/bin/cfn-signal -e $? --stack <%=stack_name%> --resource WebServerGroup --region <%=region%>"
              - "\n"
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: '/'
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3
      PolicyDocument:
        Statement:
          Effect: Allow
          Action: ['s3:GetObject']
          Resource: 'arn:aws:s3:::cdo-dist/*'
      Roles: [Ref: RootRole]
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: [Ref: RootRole]
  PegasusCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%=AWS::CloudFront.config_cloudformation(:pegasus, "origin-#{stack_name}.#{domain}", ["pegasus-#{stack_name}.#{domain}"], nil)%>
  DashboardCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: <%=AWS::CloudFront.config_cloudformation(:dashboard, "origin-#{stack_name}.#{domain}", ["dashboard-#{stack_name}.#{domain}"], nil)%>
  PegasusDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "pegasus-<%=stack_name%>.<%=domain%>"
          Type: A
          AliasTarget:
            DNSName: {'Fn::GetAtt': [PegasusCDN, DomainName]}
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
  DashboardDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "dashboard-<%=stack_name%>.<%=domain%>"
          Type: A
          AliasTarget:
            DNSName: {'Fn::GetAtt': [DashboardCDN, DomainName]}
            HostedZoneId: Z2FDTNDATAQYW2 # static ID for cloudfront aliases
  LoadBalancerDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: <%=domain%>.
      RecordSets:
        - Name: "origin-<%=stack_name%>.<%=domain%>"
          Type: A
          AliasTarget:
            HostedZoneId: {'Fn::GetAtt': [ElasticLoadBalancer, CanonicalHostedZoneNameID]}
            DNSName: {'Fn::GetAtt': [ElasticLoadBalancer, CanonicalHostedZoneName]}
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Action: ['cloudFront:GetDistributionConfig', 'cloudFront:UpdateDistribution']
                Resource: ['*']
                Effect: Allow
              - Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: 'arn:aws:logs:*:*:*'
                Effect: Allow
  DashboardACM:
    Type: Custom::CloudFrontAcmAssociation
    Properties:
      DistributionId: {Ref: DashboardCDN}
      CertificateArn: <%=ssl_cert%>
      ServiceToken: {'Fn::GetAtt': [AcmAssociationFunction, Arn]}
  PegasusACM:
    Type: Custom::CloudFrontAcmAssociation
    Properties:
      DistributionId: {Ref: PegasusCDN}
      CertificateArn: <%=ssl_cert%>
      ServiceToken: {'Fn::GetAtt': [AcmAssociationFunction, Arn]}
  AcmAssociationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: {'Fn::Join': ["\n", [
          "exports.handler = function(event, context) {",
          "    var response = require('cfn-response');",
          "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
          "    if (event.RequestType == 'Delete') {",
          "        response.send(event, context, response.SUCCESS);",
          "        return;",
          "    }",
          "    var distributionId = event.ResourceProperties.DistributionId;",
          "    var certificateArn = event.ResourceProperties.CertificateArn;",
          "    var physicalId = 'connection:' + certificateArn + ':to:' + 'distributionId';",
          "    var region = event.ResourceProperties.Region;",
          "    var responseData = {};",
          "    if (distributionId && certificateArn) {",
          "        var AWS = require('aws-sdk');",
          "        var cloudfront = new AWS.CloudFront();",
          "        cloudfront.getDistributionConfig({Id: distributionId}, function(err, data) {",
          "            if (err) {",
          "                responseData = {Error: 'getDistributionConfig call failed'};",
          "                console.log(responseData.Error + ':\\n', err);",
          "                response.send(event, context, response.FAILED, responseData);",
          "            }",
          "            else {",
          "                var etag = data.ETag;",
          "                var config = data.DistributionConfig;",
          "                if (!config['ViewerCertificate']) {",
          "                    responseData = {Error: 'No ViewerCertificate'};",
          "                    console.log(responseData.Error + ':\\n', err);",
          "                    response.send(event, context, response.FAILED, responseData);",
          "                    return;",
          "                }",
          "                if (config['ViewerCertificate']['Certificate'] == certificateArn) {",
          "                    response.send(event, context, response.SUCCESS, responseData, physicalId);",
          "                    return;",
          "                }",
          "                config['ViewerCertificate'] = {",
          "                  'ACMCertificateArn': certificateArn,",
          "                  'MinimumProtocolVersion': 'TLSv1',",
          "                  'SSLSupportMethod': 'sni-only',",
          "                };",
          "                cloudfront.updateDistribution({",
          "                  Id: distributionId,",
          "                  DistributionConfig: config,",
          "                  IfMatch: etag",
          "                }, function(err, data) {",
          "                  if (err) {",
          "                      responseData = {Error: 'updateDistribution call failed'};",
          "                      console.log(responseData.Error + ':\\n', err);",
          "                      response.send(event, context, response.FAILED, responseData);",
          "                  }",
          "                  response.send(event, context, response.SUCCESS, responseData, physicalId);",
          "                });",
          "            }",
          "        });",
          "    } else {",
          "        responseData = {Error: 'Required properties DistributionId and/or CertificateArn not specified'};",
          "        console.log(responseData.Error);",
          "        response.send(event, context, response.FAILED, responseData);",
          "    }",
          "};"
        ]]}
      Handler: index.handler
      Runtime: nodejs
      Timeout: 300
      Role: {'Fn::GetAtt': [LambdaExecutionRole, Arn]}
Outputs:
  DashboardURL:
    Value: "https://dashboard-<%=stack_name%>.<%=domain%>"
    Description: Dashboard URL
  PegasusURL:
    Value: "https://pegasus-<%=stack_name%>.<%=domain%>"
    Description: Dashboard URL
